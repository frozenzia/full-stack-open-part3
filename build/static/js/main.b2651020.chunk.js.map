{"version":3,"sources":["components/Person.js","components/Filter.js","components/Notification.js","services/personsdb.js","App.js","index.js"],"names":["Person","_ref","name","phone","handleDelete","id","react_default","a","createElement","onClick","Filter","value","handleChange","onChange","Notification","message","className","baseUrl","personsdb","getAll","axios","get","then","response","data","create","newObject","post","remove","delete","concat","update","put","App","state","persons","newName","newPhone","filter","successMsg","successStatus","componentDidMount","dbService","_this","setState","tryAddingUser","pObject","person","setTimeout","catch","error","setNameAndNumber","event","preventDefault","name2Add","existingPerson","find","window","confirm","newPerson","Object","objectSpread","changedPerson","p","sucessStatus","status","handleNameChange","target","handlePhoneChange","handleFilterChange","console","log","_this2","this","currentPeople","toConsumableArray","toLowerCase","includes","namesToShow","map","components_Person","key","components_Filter","components_Notification","onSubmit","type","React","Component","ReactDOM","render","src_App","notes","content","date","important","document","getElementById"],"mappings":"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","file":"static/js/main.b2651020.chunk.js","sourcesContent":["import React from 'react';\n\nconst Person = ({ name, phone, id, handleDelete }) => (\n    <tr>\n        <td>{name}</td>\n        <td>{phone}</td>\n        <td><button onClick={handleDelete}>poista</button></td>\n    </tr>\n)\n\nexport default Person;\n","import React from 'react';\n\nconst Filter = ({ value, handleChange }) => {\n    return (\n        <div>\n            rajaa näytettäviä:  <input\n                                    value={value}\n                                    onChange={handleChange}\n                                />\n        </div>\n    );\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst Notification = ({ message, className }) => {\n    if (!message) return null;\n    return (\n        <div className={className}>\n            {message}\n        </div>\n    );\n};\n\nexport default Notification;\n","import axios from 'axios'\nconst baseUrl = 'api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n  .then(response => response.data);\n}\n\nconst create = (newObject) => {\n  return axios.post(baseUrl, newObject)\n  .then(response => response.data);\n}\n\nconst remove = (id) => {\n  return axios.delete(`${baseUrl}/${id}`)\n  .then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n  .then(response => response.data);\n}\n\nexport default { getAll, create, remove, update }\n","import React from 'react';\nimport Person from './components/Person';\nimport Filter from './components/Filter';\nimport Notification from './components/Notification';\nimport dbService from './services/personsdb';\n\nclass App extends React.Component {\n\n    state = {\n        persons: [],\n        newName: '',\n        newPhone: '',\n        filter: '',\n        successMsg: null,\n        successStatus: null,\n    };\n\n    componentDidMount = () => {\n        dbService.getAll()\n        .then((persons) => {\n            this.setState({ persons });\n        });\n    };\n\n    tryAddingUser = (pObject) => {\n        dbService.create(pObject)\n        .then((person) => {\n            const persons = this.state.persons.concat(person);\n            this.setState(\n                {\n                    persons,\n                    newName: '',\n                    newPhone: '',\n                    successMsg: `${person.name} onnistuneesti lisätty`,\n                    successStatus: 'success',\n                }\n            );\n            setTimeout(() => {\n                this.setState({ successMsg: null, successStatus: null, });\n            }, 3500);\n        })\n        .catch((error) => {\n            this.setState({ successMsg: 'lisääminen epäonnistui, valitan', successStatus: 'error', });\n            setTimeout(() => {\n                this.setState({ successMsg: null, successStatus: null, });\n            }, 3500);\n        });\n    }\n\n    setNameAndNumber = (event) => {\n        event.preventDefault();\n        const name2Add = this.state.newName;\n        const existingPerson = this.state.persons.find((person) => {\n            return person.name === name2Add;\n        });\n        if (!existingPerson) {\n            const newPerson =   {\n                                    name: this.state.newName,\n                                    phone: this.state.newPhone,\n                                };\n            this.tryAddingUser(newPerson);\n        } else { // offer to change the current phone number of the persion\n            if (window.confirm(`${name2Add} on jo luettelossa, korvataanko vanha numero uudella?`)) {\n                const newPerson =   {\n                                        ...existingPerson,\n                                        phone: this.state.newPhone,\n                                    };\n                dbService.update(newPerson.id, newPerson)\n                .then((changedPerson) => {\n                    const persons = this.state.persons.filter(p => p.id !== changedPerson.id);\n                    this.setState({\n                        persons: persons.concat(changedPerson),\n                        newName: '',\n                        newPhone: '',\n                        successMsg: `puhelinnumero hlölle: ${name2Add} onnistuneesti muutettu`,\n                        successStatus: 'success',\n                    });\n                    setTimeout(() => {\n                        this.setState({ successMsg: null, sucessStatus: null, });\n                    }, 3500);\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        if (error.response.status === 404) { // user was deleted elsewhere!\n                            // first update to current state:\n                            dbService.getAll()\n                            .then((persons) => {\n                                this.setState({ persons });\n                            });\n                            this.tryAddingUser(newPerson);\n                        }\n                        else {\n                            this.setState({ successMsg: 'oudohko virhe, ei onnistunut', successStatus: 'error', });\n                            setTimeout(() => {\n                                this.setState({ successMsg: null, successStatus: null, });\n                            }, 3500);\n                        }\n                    }\n                    else {\n                        this.setState({ successMsg: 'oudohko virhe, ei onnistunut', successStatus: 'error', });\n                        setTimeout(() => {\n                            this.setState({ successMsg: null, successStatus: null, });\n                        }, 3500);\n                    }\n                });\n            }\n        };\n    };\n\n    handleNameChange = (event) => {\n        this.setState({ newName: event.target.value })\n    };\n\n    handlePhoneChange = (event) => {\n        this.setState({ newPhone: event.target.value })\n    };\n\n    handleFilterChange = (event) => {\n        this.setState({ filter: event.target.value })\n    };\n\n    handleDelete = (id, name) => () => {\n        if (window.confirm(`poistetaanko ${name}?`)) {\n            dbService.remove(id)\n            .then(() => {\n                this.setState(\n                    {\n                        persons: this.state.persons.filter((p) => {\n                            return p.id !== id;\n                        }),\n                        successMsg: `${name} onnistuneesti poistettu`,\n                        successStatus: 'success',\n                    }\n                );\n                setTimeout(() => {\n                    this.setState({ successMsg: null, successStatus: null, });\n                }, 3500);\n            })\n            .catch((error) => {\n                console.log('error: ', error);\n                this.setState({ successMsg: 'error', successStatus: 'error', });\n                setTimeout(() => {\n                    this.setState({ successMsg: null, successStatus: null, });\n                }, 3500);\n            });\n        }\n    };\n\n    render() {\n        let currentPeople = [...this.state.persons];\n        if (this.state.filter !== '') {\n            currentPeople = currentPeople.filter((person) => {\n                return person.name.toLowerCase().includes(\n                    this.state.filter.toLowerCase()\n                );\n            });\n        }\n        const namesToShow = currentPeople.map(person =>\n            <Person\n                key={person.name}\n                name={person.name}\n                phone={person.phone}\n                handleDelete={this.handleDelete(person.id, person.name)}\n            />\n        );\n\n        return (\n            <div>\n                <h2>Puhelinluettelo</h2>\n                <Filter\n                    value={this.state.filter} handleChange={this.handleFilterChange}\n                />\n\n                <h3>Lisää uusi</h3>\n                <Notification message={this.state.successMsg} className={this.state.successStatus} />\n                <form onSubmit={this.setNameAndNumber}>\n                    <div>\n                        nimi:   <input\n                                    value={this.state.newName} onChange={this.handleNameChange}\n                                />\n                    </div>\n                    <div>\n                        numero: <input\n                                    value={this.state.newPhone} onChange={this.handlePhoneChange}\n                                />\n                    </div>\n                    <div>\n                        <button type=\"submit\">\n                            lisää\n                        </button>\n                    </div>\n                </form>\n                <h3>Numerot</h3>\n                <table>\n                <tbody>{namesToShow}</tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\nimport './index.css';\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML on helppoa',\n    date: '2017-12-10T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Selain pystyy suorittamaan vain javascriptiä',\n    date: '2017-12-10T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'HTTP-protokollan tärkeimmät metodit ovat GET ja POST',\n    date: '2017-12-10T19:20:14.298Z',\n    important: true\n  }\n]\n\nReactDOM.render(\n  <App notes={notes} />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}