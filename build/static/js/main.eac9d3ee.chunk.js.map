{"version":3,"sources":["services/persons.js","components/Filter.js","components/AddUserForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","resp","data","newObject","post","id","put","delete","Filter","filterString","onFilterChange","value","onChange","AddUserForm","props","onSubmit","nameString","onNameChange","nameInputRef","phoneString","onPhoneChange","autoFocus","ref","type","Persons","persons","onPersonDelete","filter","person","name","toLowerCase","includes","map","key","phone","onClick","Notification","message","succeeded","className","defaultProps","App","htmlElRef","useRef","current","focus","useFocus","setNameInputFocus","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","actionResult","setActionResult","useEffect","personService","allPersons","showActionResult","text","setTimeout","event","target","preventDefault","p","window","confirm","index","findIndex","newPerson","catch","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eac9d3ee.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios\n        .get(baseUrl)\n        .then(resp => resp.data)\n}\n\nconst create = newObject => {\n    return axios\n        .post(baseUrl, newObject)\n        .then(resp => resp.data)\n}\n\nconst update = (id, newObject) => {\n    return axios\n        .put(`${baseUrl}/${id}`, newObject)\n        .then(resp => resp.data)\n}\n\nconst destroy = (id) => {\n    return axios\n        .delete(`${baseUrl}/${id}`)\n        .then(() => {})\n}\n\nexport default { getAll, create, update, destroy };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ filterString, onFilterChange }) => {\n    return (\n            <p>\n                filter shown with   <input\n                                        value={filterString}\n                                        onChange={onFilterChange}\n                                    />\n            </p>\n\n    );\n};\n\nFilter.propTypes = {\n    filterString: PropTypes.string.isRequired,\n    onFilterChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddUserForm = (props) => {\n    const { onSubmit, nameString, onNameChange, nameInputRef, phoneString, onPhoneChange } = props;\n    return (\n\n            <form onSubmit={onSubmit}>\n                <div>\n                    name:   <input\n                                autoFocus\n                                value={nameString}\n                                onChange={onNameChange}\n                                ref={nameInputRef}\n                            />\n                </div>\n                <div>\n                    number: <input\n                                value={phoneString}\n                                onChange={onPhoneChange}\n                            />\n                </div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n\n    );\n};\n\nAddUserForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    nameString: PropTypes.string.isRequired,\n    onNameChange: PropTypes.func.isRequired,\n    nameInputRef: PropTypes.shape({}).isRequired,\n    phoneString: PropTypes.string.isRequired,\n    onPhoneChange: PropTypes.func.isRequired,\n};\n\nexport default AddUserForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Persons = ({ persons, filterString, onPersonDelete }) => {\n    const getPeopleToShow = () => {\n        const personsToMap = filterString === ''\n        ? persons\n        : persons.filter((person) => person.name.toLowerCase().includes(filterString.toLowerCase()))\n        return personsToMap\n            .map(person =>\n                <p key={person.name}>\n                    {person.name} {person.phone}\n                    <button onClick={() => onPersonDelete(person.id)}>delete</button>\n                </p>\n            )\n    }\n\n    return (\n        getPeopleToShow()\n    );\n};\n\nPersons.propTypes = {\n    persons: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    filterString: PropTypes.string.isRequired,\n};\n\nexport default Persons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message, succeeded }) => {\n\n    if (message === null) return null;\n    // else\n    return (\n        <div className={succeeded ? 'notice' : 'notice fail'}>\n            {message}\n        </div>\n    );\n};\n\nNotification.propTypes = {\n    message: PropTypes.string,\n    succeeded: PropTypes.bool,\n};\n\nNotification.defaultProps = {\n    message: null,\n    succeeded: true,\n}\n\nexport default Notification;\n","import React, { useEffect, useRef, useState } from 'react'\n\nimport personService from './services/persons';\nimport Filter from './components/Filter';\nimport AddUserForm from './components/AddUserForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\n\nconst useFocus = () => {\n    const htmlElRef = useRef(null)\n    const setFocus = () => {\n        htmlElRef.current && htmlElRef.current.focus()\n    }\n    return [ htmlElRef, setFocus ]\n}\n\n\nconst App = () => {\n    const [ nameInputRef, setNameInputFocus ] = useFocus();\n    const [ persons, setPersons ] = useState([])\n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [ newFilter, setNewFilter ] = useState('')\n    const [ actionResult, setActionResult ] = useState(null)\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then((allPersons) => {\n                setPersons(allPersons);\n            })\n    }, []); // <-- '[]' here indicates to run the effect only after 1st render\n\n    const showActionResult = (text, succeeded) => {\n        setActionResult({ text, succeeded });\n        setTimeout(() => {\n            setActionResult(null);\n        }, 5000);\n    }\n\n    const handleNameDelete = (id) => {\n        const { name } = persons.find(p => p.id === id);\n        if (window.confirm(`Delete ${name}?`)) {\n            personService\n            .destroy(id)\n            .then(() => {\n                showActionResult(`Deleted ${name}`, true);\n                setPersons(persons.filter(p => p.id !== id));\n            });\n        }\n    }\n\n    const handleAddName = (event) => {\n        event.preventDefault();\n\n        const currentNames = persons.map(p => p.name);\n        if (currentNames.includes(newName)) {\n            if (window.confirm(`${newName} is already here, shall we replace the old number with the new one?`)) {\n                const index = persons.findIndex(p => p.name === newName);\n                const id = persons[index].id;\n                personService\n                    .update(id, ({ ...persons[index], phone: newNumber }))\n                    .then((newPerson) => {\n                        showActionResult(`Changed phone number for ${newName} to: ${newNumber}`, true);\n                        setPersons(persons.map((p) => p.id !== id ? p : newPerson));\n                    })\n                    .catch(() => {\n                        showActionResult(`Data for ${newName} already deleted from server?`, false);\n                    });\n            }\n        } else {\n            personService\n                .create({ name: newName, phone: newNumber })\n                .then((allPersons) => {\n                    showActionResult(`Added ${newName}`, true);\n                    setPersons(allPersons);\n                    setNewName('');\n                    setNewNumber('');\n                    setNameInputFocus();\n                });\n        }\n    }\n\n    const handleNameChange = (event) => setNewName(event.target.value);\n    const handleNumberChange = (event) => setNewNumber(event.target.value);\n    const handleFilterChange = (event) => setNewFilter(event.target.value);\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n\n            <Notification\n                message={actionResult && actionResult.text}\n                succeeded={actionResult && actionResult.succeeded}\n            />\n\n            <Filter filterString={newFilter} onFilterChange={handleFilterChange} />\n\n            <h2>add a new</h2>\n            <AddUserForm\n                onSubmit={handleAddName}\n                nameString={newName}\n                onNameChange={handleNameChange}\n                nameInputRef={nameInputRef}\n                phoneString={newNumber}\n                onPhoneChange={handleNumberChange}\n            />\n\n            <h2>Numbers</h2>\n            <Persons persons={persons} filterString={newFilter} onPersonDelete={handleNameDelete} />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}